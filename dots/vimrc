let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

Plug 'junegunn/vim-easy-align'
Plug 'https://github.com/junegunn/vim-github-dashboard.git'
Plug 'scrooloose/nerdtree'
Plug 'junegunn/vim-plug'
Plug 'rizzatti/dash.vim'
Plug 'itchyny/lightline.vim'
Plug 'rafi/awesome-vim-colorschemes'
Plug 'tyrannicaltoucan/vim-quantum'
Plug 'tpope/vim-fugitive'
Plug 'sheerun/vim-polyglot'
Plug 'junegunn/goyo.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'easymotion/vim-easymotion'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'airblade/vim-gitgutter'
Plug 'jreybert/vimagit'
Plug 'nvim-telescope/telescope.nvim'
Plug 'cj/vim-webdevicons'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf'
Plug 'ivanovyordan/dbt.vim'


call plug#end()

set relativenumber
set nu rnu
set foldcolumn=4
highlight EndOfBuffer ctermfg=black ctermbg=black

set background=dark
set termguicolors
colorscheme quantum


set encoding=utf-8
" simple remaps
noremap <leader>r :luafile /home/pdmthorsrud/.vimrc<Enter>
let mapleader = " "
inoremap jk <Esc>
inoremap <leader>K gt
noremap <leader>h :w<Enter>
noremap <leader>e :e $MYVIMRC<Enter>
noremap <leader>r :source $MYVIMRC<Enter>
inoremap <leader>J gT
nnoremap <leader>wq <c-w>q
nnoremap <leader>wv <c-w>v
nnoremap <leader>ws <c-w>S
nnoremap <leader>ww <c-w>w
nnoremap <leader>f :Buffers<CR>


map <leader>o o<Esc>k
map <leader>O O<Esc>j
nmap <silent> <leader>i "=nr2char(getchar())<cr>P| " allows me to add char at cursor
" actual visual line navigation
nnoremap k gk
nnoremap j gj
nnoremap gk k
nnoremap gj j

" use leader to interact with the system clipboard
noremap <leader>p "*]p
noremap <leader>P "*]P
noremap <leader>v "*]p
noremap <leader>V "*]P

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" NERDTREE stuff
nnoremap <leader>t :NERDTreeToggle<Enter>
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1


" indentation and formatting
:set tw=120
:set ts=2
:set sts=2
:set sw=2
set nocompatible
filetype plugin on
syntax on

set rtp+=~/.fzf

" WSL yank support
" let s:clip = '/mnt/c/Windows/System32/clip.exe'  " change this path according to your mount point
" if executable(s:clip)
"     augroup WSLYank
"         autocmd!
"         autocmd TextYankPost * if v:event.operator ==# 'y' | call system(s:clip, @0) | endif
"     augroup END
" endif
